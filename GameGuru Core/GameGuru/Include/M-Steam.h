//----------------------------------------------------
//--- GAMEGURU - M-Steam
//----------------------------------------------------

#include "cstr.h"

void steam_init ( void );
void steam_loop ( void );
void steam_free ( void );
void steam_checkVoiceChat ( void );
void steam_spawn_objects ( void );
void steam_lua ( void );
void steam_delete_entities ( void );
void steam_pre_game_file_sync ( void );
void steam_pre_game_file_sync_server ( void );
void steam_pre_game_file_sync_client ( void );
void steam_sendAvatarInfo ( void );
void steam_animation ( void );
void steam_update_player ( void );
void steam_updatePlayerPositions ( void );
void steam_server_message ( void );
void steam_updatePlayerNamePlates ( void );
void steam_updatePlayerAnimations ( void );
void steam_switchAnim ( void );
void steam_update_waist_rotation ( void );
void steam_showdeath ( void );
void steam_respawn ( void );
void steam_getPlaceToSpawn ( void );
void steam_getInitialPlayerCount ( void );
void steam_nukeTestmap ( void );
void steam_respawnEntities ( void );
void steam_addDestroyedObject ( void );
void steam_add_respawn_timed ( void );
void steam_setLuaPlayerNames ( void );
void steam_setLuaResetStats ( void );
void steam_updatePlayerInput ( void );
void steam_load_guns ( void );
void steam_check_for_attachments ( void );
void steam_addJetpackParticles ( void );
void steam_NearOtherPlayers ( void );
void steam_check_respawn_objects ( void );
void steam_checkForEveryoneLeft ( void );
void steam_lostConnection ( void );
void steam_gameLoop ( void );
void steam_dontShowOtherPlayers ( void );
void steam_ending_game ( void );
void steam_free_game ( void );
void steam_subbedToItem ( void );
void steam_checkItemSubbed ( void );
void steam_resetGameStats ( void );
void steam_update_all_projectiles ( void );
void steam_destroyentity ( void );
void steam_refresh ( void );
void steam_setMessage ( void );
void steam_setMessageDots ( void );
void steam_message ( void );
void steam_messageDots ( void );
void steam_update_projectile ( void );
void steam_serverSetLuaGameMode ( void );
void steam_setServerTimer ( void );
void steam_serverRespawnAll ( void );
void steam_restoreEntities ( void );
void steam_serverEndPlay ( void );
void steam_setServerKillsToWin ( void );
void steam_networkkill ( void );
void steam_lobbyListBox ( void );
void steam_createLobby ( void );
void steam_searchForLobbies ( void );
void steam_searchForFpms ( void );
void steam_launchGame ( void );
void steam_backToStart ( void );
void steam_selectedALevel ( void );
void steam_checkIfLevelHasCustomContent ( void );
void steam_buildWorkShopItem ( void );
void steam_buildingWorkshopItemFailed ( void );
void steam_joinALobby ( void );
void steam_canIJoinThisLobby ( void );
void steam_leaveALobby ( void );
void steam_SubscribeToWorkShopItem ( void );
void steam_save_workshop_files_needed ( void );
void steam_grabWorkshopChangedFlagAndVersion ( void );
int steam_check_if_entity_is_from_install ( char* name_s );
void steam_resetSteam ( void );
void steam_shoot ( void );
void steam_chat ( void );
void steam_chatNew ( void );
void steam_quitGame ( void );
void steam_freefadesprite ( void );
void steam_backToEditor ( void );
void steam_cleanupGame ( void );
void steam_sendSteamIDToEditor ( void );
void steam_checkIfLobbiesAvailable ( void );
void steam_flashLightOff ( void );
void steam_setupCoopTeam ( void );
void steam_COOP_aiMoveTo ( void );
void steam_entity_lua_lookatplayer ( void );
void steam_entity_lua_fireweaponEffectOnly ( void );
void steam_updateAIForCOOP ( void );
void steam_coop_rotatetoplayer ( void );
void steam_storeOldEntityPositions ( void );
void steam_howManyEnemiesLeftToKill ( void );
void steam_IKilledAnAI ( void );
void steam_text ( int x, int y, int size, char* txt_s );
void steam_textDots ( int x, int y, int size, char* txt_s );
void steam_textColor ( int x, int y, int size, char* txt_s, int r, int g, int b );
void steam_panel ( int x, int y, int x2, int y2 );
void steam_livelog ( char* t_s );
void steam_deleteFile ( char* tempFileToDelete_s );
int steam_check_if_lua_entity_exists ( int tentitytocheck );
