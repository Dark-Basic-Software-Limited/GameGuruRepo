//  collisionmode
//  0 ; default Box (  )
//  1 ; polygon shape
//  2 ; sphere??legacy
//  3 ; cylinder??legacy
//  9 ; convex hull reduction
//  11 ; no physics
//  12 ; no physics but can still be shot with intersectall check
//  21 ; player repell feature (for characters and other beasts/zombies)
//  40 ; collision boxes
//  41-49 ; reserved (collision poly list, spehere list, cylinder list)
//  50 
//  51 
//  52-59 
//  1000-2000 ; only one limb has collision Box (1000=limb zero)
//  2000-3000 ; only one limb has collision polygons (2000=limb zero)
// NOTE: When ISCHARACTER=1 the physics is overridden with a PHYSICS CAPSULE

//  forcesimpleobstacle
//  -1 ; absolutely no obstacle
//  0 ; default
//  1 ; Box (  )
//  2 ; contour
//  3 ; full poly scan

// ismarker flags
// 0 : normal entity
// 1 : player start marker
// 2 : light
// 3 : zone marker
// 4 : decal particle
// 5 : light?
// 6 : checkpoint marker
// 7 : multiplayer start marker

//  materialindex
//  0    = GenericSoft
//  1    = Stone
//  2    = Metal
//  3    = Wood
//  4    = Glass
//  5    = Liquid Splashy Wet
//  6    = Flesh (Bloody Organic)
//  7    = Hollow Drum Metal
//  8    = Small High Pitch Tin
//  9    = Small Low Pitch Tin
//  10   = Silly Material
//  11   = Marble
//  12   = Cobble
//  13   = Gravel
//  14   = Soft Metal
//  15   = Old Stone
//  16   = Old Wood
//  17   = Shallow Water
//  18   = Underwater

//  transparency modes;
//  0 - first-phase no alpha
//  1 - first-phase with alpha masking
//  2 and 3 - second-phase which overlaps solid geometry
//  4 - alpha test (only render beyond 0x000000CF alpha values)
//  5 - water Line (  object (seperates depth sort automatically) )
//  6 - combination of 3 and 4 (second phase render with alpha blend AND alpha test, used for fading LOD leaves)
//  7 - very early draw phase no alpha

FULL SOURCE CODE OF FPE SCANS AS AT 180116:

				t.tryfield_s="aiinit";
				t.tryfield_s="aimain";
				t.tryfield_s="aidestroy";
				t.tryfield_s="aishoot";
				t.tryfield_s="soundset";
				t.tryfield_s="soundset1";
				t.tryfield_s="usekey";
				t.tryfield_s="ifused";
				t.tryfield_s="ifusednear";
				t.tryfield_s="spawnmax";
				t.tryfield_s="spawndelay";
				t.tryfield_s="spawnqty";
				t.tryfield_s="model";
				t.tryfield_s="offsetx";
				t.tryfield_s="offsety";
				t.tryfield_s="offsetz";
				t.tryfield_s="rotx";
				t.tryfield_s="roty";
				t.tryfield_s="rotz";
				t.tryfield_s="scale";
				t.tryfield_s="fixnewy";
				t.tryfield_s="raisefactor";
				t.tryfield_s="forwardfacing";
				t.tryfield_s="defaultheight";
				t.tryfield_s="defaultstatic";
				t.tryfield_s="autoflatten";
				if (  t.field_s == t.tryfield_s  )  t.entityprofile[t.entid].autoflatten = t.value1;

				//  collisionmode
				//  0 ; default Box (  )
				//  1 ; polygon shape
				//  2 ; sphere??legacy
				//  3 ; cylinder??legacy
				//  9 ; convex hull reduction
				//  11 ; no physics
				//  12 ; no physics but can still be shot with intersectall check
				//  21 ; player repell feature (for characters and other beasts/zombies)
				//  40 ; collision boxes
				//  41-49 ; reserved (collision poly list, spehere list, cylinder list)
				//  50 
				//  51 
				//  52-59 
				//  1000-2000 ; only one limb has collision Box (1000=limb zero)
				//  2000-3000 ; only one limb has collision polygons (2000=limb zero)
				t.tryfield_s="collisionmode";
				t.tryfield_s="collisionscaling";
				t.tryfield_s="collisionoverride";

				//  forcesimpleobstacle
				//  -1 ; absolutely no obstacle
				//  0 ; default
				//  1 ; Box (  )
				//  2 ; contour
				//  3 ; full poly scan
				t.tryfield_s="forcesimpleobstacle";
				t.tryfield_s="notanoccluder";
				t.tryfield_s="skipfvfconvert";

				t.tryfield_s="resetlimbmatrix";
				t.tryfield_s="reverseframes";
				t.tryfield_s="fullbounds";

				//  cpuanims
				//  0 ; GPU animation
				//  1 ; CPU animation (for wide scope animations that need accurate ray detection)
				//  2 ; Same as [1] but will hide any meshes that do not have animations
				t.tryfield_s="cpuanims";
				t.tryfield_s="ignoredefanim";

				//  materialindex
				//  0    = GenericSoft
				//  1    = Stone
				//  2    = Metal
				//  3    = Wood
				//  4    = Glass
				//  5    = Liquid Splashy Wet
				//  6    = Flesh (Bloody Organic)
				//  7    = Hollow Drum Metal
				//  8    = Small High Pitch Tin
				//  9    = Small Low Pitch Tin
				//  10   = Silly Material
				//  11   = Marble
				//  12   = Cobble
				//  13   = Gravel
				//  14   = Soft Metal
				//  15   = Old Stone
				//  16   = Old Wood
				//  17   = Shallow Water
				//  18   = Underwater
				t.tryfield_s="materialindex";
				t.tryfield_s="debrisshape";

				t.tryfield_s="disablebatch";
				t.tryfield_s="lod1distance";
				t.tryfield_s="lod2distance";

				//  physics setup
				t.tryfield_s="physics";
				t.tryfield_s="phyweight";
				t.tryfield_s="phyfriction";
				t.tryfield_s="explodable";
				t.tryfield_s="ragdoll";

				t.tryfield_s="nothrowscript";
				t.tryfield_s="coneheight";
				t.tryfield_s="coneangle";
				t.tryfield_s="conerange";

				//  visual info
				t.tryfield_s="onetexture";
				t.tryfield_s="texturepath";
				t.tryfield_s="textured";
				t.tryfield_s="texturealtd";
				t.tryfield_s="effect";

				//  transparency modes;
				//  0 - first-phase no alpha
				//  1 - first-phase with alpha masking
				//  2 and 3 - second-phase which overlaps solid geometry
				//  4 - alpha test (only render beyond 0x000000CF alpha values)
				//  5 - water Line (  object (seperates depth sort automatically) )
				//  6 - combination of 3 and 4 (second phase render with alpha blend AND alpha test, used for fading LOD leaves)
				//  7 - very early draw phase no alpha
				t.tryfield_s="transparency";
				t.tryfield_s="canseethrough";
				t.tryfield_s="specular";

				if (  t.field_s == t.tryfield_s  )  t.entityprofile[t.entid].cullmode = t.value1;
				if (  t.field_s == t.tryfield_s  )  t.entityprofile[t.entid].reducetexture = t.value1;
				if (  t.field_s == t.tryfield_s  )  t.entityprofile[t.entid].castshadow = t.value1;
				if (  t.field_s == t.tryfield_s  )  t.entityprofile[t.entid].smoothangle = t.value1;

				t.tryfield_s="strength";
				t.tryfield_s="lives";
				t.tryfield_s="speed";
				t.tryfield_s="animspeed";
				t.tryfield_s="hurtfall";

				t.tryfield_s="isimmobile";
				t.tryfield_s="isviolent";
				t.tryfield_s="isobjective";
				t.tryfield_s="alwaysactive";

				t.tryfield_s="ischaracter";
				t.tryfield_s="isthirdperson";
				t.tryfield_s="canfight";

				t.tryfield_s="custombiped";

				t.tryfield_s="cantakeweapon";
				t.tryfield_s="isweapon";
				t.tryfield_s="rateoffire";
				t.tryfield_s="ishudlayer";

				t.tryfield_s="isequipment";
				t.tryfield_s="isammo";
				t.tryfield_s="hasweapon";
				t.tryfield_s="hasequipment";
				t.tryfield_s="ishealth";
				t.tryfield_s="isflak";
				t.tryfield_s="fatness";

				//  marker extras
				//  1=player
				//  2=lights
				//  3=trigger zone
				//  4=decal particle emitter
				//  5=entity lights
				//  6=checkpoint zone
				//  7=multiplayer start
				t.tryfield_s="ismarker";
				t.tryfield_s="markerindex";
				t.tryfield_s="addhandle";

				//  light extras
				t.tryfield_s="lightcolor";
				t.tryfield_s="lightrange";
				t.tryfield_s="lightoffsetup";
				t.tryfield_s="lightoffsetz";

				//  trigger extras
				t.tryfield_s="stylecolor";

				//  extra decal offset (ideal for placing flames in torches, etc)
				t.tryfield_s="decalangle";
				t.tryfield_s="decaldist";
				t.tryfield_s="decaly";

				//  entity body part list (20/01/11 - refeatured for V118)
				t.tryfield_s="limbmax";
				t.strwork = ""; t.strwork = t.strwork + "limb"+Str(t.q);

				//  determine if entity has a head, and which limbs represent it
				t.tryfield_s="headlimbs";

				//  entity decal refs
				t.tryfield_s="decalmax";
				t.tryfield_s = cstr((cstr("decal")+Str(t.q)) );

				//  entity animation sets
				t.tryfield_s="playanimineditor";
				t.tryfield_s="animstyle";
				t.tryfield_s="animmax";
				t.tryfield_s=cstr("anim")+Str(t.q);

				darkai_assignanimtofield ( );

				t.tryfield_s=cstr("footfall")+Str(t.q);

				//  more data
				t.tryfield_s="quantity";

